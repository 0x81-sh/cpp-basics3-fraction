        -:    0:Source:/mnt/c/Users/ulric/3AHIF/POS/C++/Basics/Fraction/main.cpp
        -:    0:Graph:/mnt/c/Users/ulric/3AHIF/POS/C++/Basics/Fraction/cmake-build-debug-coverage/CMakeFiles/Fraction.dir/main.cpp.gcno
        -:    0:Data:/mnt/c/Users/ulric/3AHIF/POS/C++/Basics/Fraction/cmake-build-debug-coverage/CMakeFiles/Fraction.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <cassert>
        -:    3:#include "Fraction.h"
        -:    4:
        -:    5:void test_mul(const Fraction &a, const Fraction &b, const Fraction &res);
        -:    6:void test_div(const Fraction &a, const Fraction &b, const Fraction &res);
        -:    7:void test_cmp(const Fraction &a, const Fraction &b);
        -:    8:void test_reduce(const Fraction &a, const Fraction &b);
        -:    9:
function main called 1 returned 100% blocks executed 65%
        1:   10:int main() {
        1:   11:    test_mul(Fraction(1, 23), Fraction(7, 3), Fraction(7, 69));
        1:   11-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   11-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   11-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
    $$$$$:   11-block  3
    $$$$$:   11-block  4
    $$$$$:   11-block  5
call   10 never executed
        1:   12:    test_div(Fraction(1, 23), Fraction(7, 3), Fraction(3, 161));
        1:   12-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   12-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   12-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
    $$$$$:   12-block  3
    $$$$$:   12-block  4
    $$$$$:   12-block  5
call   10 never executed
        1:   13:    test_cmp(Fraction(1, 4), Fraction(1 ,4));
        1:   13-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   13-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:   13-block  2
    $$$$$:   13-block  3
call    7 never executed
        1:   14:    test_reduce(Fraction(26, 2), Fraction(13, 1));
        1:   14-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   14-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:   14-block  2
        -:   15:
        1:   16:    return 0;
        1:   16-block  0
        -:   17:}
        -:   18:
function _Z8test_mulRK8FractionS1_S1_ called 1 returned 100% blocks executed 83%
        1:   19:void test_mul(const Fraction &a, const Fraction &b, const Fraction &res) {
       1*:   20:    assert(a * b == res);
        1:   20-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   20-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   20-block  2
call    6 never executed
        1:   21:}
        1:   21-block  0
        -:   22:
function _Z8test_divRK8FractionS1_S1_ called 1 returned 100% blocks executed 83%
        1:   23:void test_div(const Fraction &a, const Fraction &b, const Fraction &res) {
       1*:   24:    assert(a / b == res);
        1:   24-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   24-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   24-block  2
call    6 never executed
        1:   25:}
        1:   25-block  0
        -:   26:
function _Z8test_cmpRK8FractionS1_ called 1 returned 100% blocks executed 75%
        1:   27:void test_cmp(const Fraction &a, const Fraction &b) {
       1*:   28:    assert(a == b);
        1:   28-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   28-block  1
call    3 never executed
        1:   29:}
        -:   30:
function _Z11test_reduceRK8FractionS1_ called 1 returned 100% blocks executed 75%
        1:   31:void test_reduce(const Fraction &a, const Fraction &b) {
       1*:   32:    assert(a == b);
        1:   32-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   32-block  1
call    3 never executed
        1:   33:}
